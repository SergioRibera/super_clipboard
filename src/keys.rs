use device_query::Keycode;

pub fn keycode_from_str(s: &str) -> Keycode {
    match s {
        "Key0" => Keycode::Key0,
        "Key1" => Keycode::Key1,
        "Key2" => Keycode::Key2,
        "Key3" => Keycode::Key3,
        "Key4" => Keycode::Key4,
        "Key5" => Keycode::Key5,
        "Key6" => Keycode::Key6,
        "Key7" => Keycode::Key7,
        "Key8" => Keycode::Key8,
        "Key9" => Keycode::Key9,
        "A" => Keycode::A,
        "B" => Keycode::B,
        "C" => Keycode::C,
        "D" => Keycode::D,
        "E" => Keycode::E,
        "F" => Keycode::F,
        "G" => Keycode::G,
        "H" => Keycode::H,
        "I" => Keycode::I,
        "J" => Keycode::J,
        "K" => Keycode::K,
        "L" => Keycode::L,
        "M" => Keycode::M,
        "N" => Keycode::N,
        "O" => Keycode::O,
        "P" => Keycode::P,
        "Q" => Keycode::Q,
        "R" => Keycode::R,
        "S" => Keycode::S,
        "T" => Keycode::T,
        "U" => Keycode::U,
        "V" => Keycode::V,
        "W" => Keycode::W,
        "X" => Keycode::X,
        "Y" => Keycode::Y,
        "Z" => Keycode::Z,
        "F1" => Keycode::F1,
        "F2" => Keycode::F2,
        "F3" => Keycode::F3,
        "F4" => Keycode::F4,
        "F5" => Keycode::F5,
        "F6" => Keycode::F6,
        "F7" => Keycode::F7,
        "F8" => Keycode::F8,
        "F9" => Keycode::F9,
        "F10" => Keycode::F10,
        "F11" => Keycode::F11,
        "F12" => Keycode::F12,
        "Escape" => Keycode::Escape,
        "Space" => Keycode::Space,
        "LControl" => Keycode::LControl,
        "RControl" => Keycode::RControl,
        "LShift" => Keycode::LShift,
        "RShift" => Keycode::RShift,
        "LAlt" => Keycode::LAlt,
        "RAlt" => Keycode::RAlt,
        "Meta" => Keycode::Meta,
        "Enter" => Keycode::Enter,
        "Up" => Keycode::Up,
        "Down" => Keycode::Down,
        "Left" => Keycode::Left,
        "Right" => Keycode::Right,
        "Backspace" => Keycode::Backspace,
        "CapsLock" => Keycode::CapsLock,
        "Tab" => Keycode::Tab,
        "Home" => Keycode::Home,
        "End" => Keycode::End,
        "PageUp" => Keycode::PageUp,
        "PageDown" => Keycode::PageDown,
        "Insert" => Keycode::Insert,
        "Delete" => Keycode::Delete,
        "Numpad0" => Keycode::Numpad0,
        "Numpad1" => Keycode::Numpad1,
        "Numpad2" => Keycode::Numpad2,
        "Numpad3" => Keycode::Numpad3,
        "Numpad4" => Keycode::Numpad4,
        "Numpad5" => Keycode::Numpad5,
        "Numpad6" => Keycode::Numpad6,
        "Numpad7" => Keycode::Numpad7,
        "Numpad8" => Keycode::Numpad8,
        "Numpad9" => Keycode::Numpad9,
        "NumpadSubtract" => Keycode::NumpadSubtract,
        "NumpadAdd" => Keycode::NumpadAdd,
        "NumpadDivide" => Keycode::NumpadDivide,
        "NumpadMultiply" => Keycode::NumpadMultiply,
        "Grave" => Keycode::Grave,
        "Minus" => Keycode::Minus,
        "Equal" => Keycode::Equal,
        "LeftBracket" => Keycode::LeftBracket,
        "RightBracket" => Keycode::RightBracket,
        "BackSlash" => Keycode::BackSlash,
        "Semicolon" => Keycode::Semicolon,
        "Apostrophe" => Keycode::Apostrophe,
        "Comma" => Keycode::Comma,
        "Dot" => Keycode::Dot,
        "Slash" => Keycode::Slash,
        _ => {
            println!("Error Parsing String: {s}");
            Keycode::Meta
        }
    }
}

pub fn keycode_to_str(k: &Keycode) -> String {
    log::debug!("Key to string: {k:?}");
    format!("{k:?}")
}
