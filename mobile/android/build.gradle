buildscript {
    apply from: "config.gradle"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libraries.androidGradlePlugin
        classpath libraries.kotlinGradlePlugin
        classpath "org.mozilla.rust-android-gradle:plugin:0.9.3"
    }
}

plugins {
    id "org.mozilla.rust-android-gradle.rust-android" version "0.9.3"
    id 'com.google.devtools.ksp' version '1.8.10-1.0.9'
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply from: "config.gradle"

dependencies {
    implementation libraries.kotlinStdLib
    implementation libraries.androidxAppcompat

    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2023.03.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation "androidx.compose.material:material"
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    implementation 'com.google.code.gson:gson:2.8.6'

    // uniffi requirement
    implementation "net.java.dev.jna:jna:5.13.0@aar"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    ksp "com.google.dagger:hilt-android-compiler:2.37"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    ksp "androidx.hilt:hilt-compiler:1.0.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0-beta01'

    // Database - Room
    implementation "androidx.room:room-runtime:2.5.2"
    ksp "androidx.room:room-compiler:2.5.2"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.5.2"
}

android {
    namespace getExportPackageName()
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    ndkVersion versions.ndkVersion

    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    kotlinOptions {
        jvmTarget = versions.javaVersion
    }

    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.composeVersion
    }

    defaultConfig {
        // The default ignore pattern for the "assets" directory includes hidden files and directories which are used by Crossbow projects.
        aaptOptions {
            ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
        }

        // Feel free to modify the application id to your own.
        applicationId getExportPackageName()
        versionCode getExportVersionCode()
        versionName getExportVersionName()
        minSdkVersion getExportMinSdkVersion()
        targetSdkVersion getExportTargetSdkVersion()

        missingDimensionStrategy "products", "template"
    }

    lintOptions {
        abortOnError false
        disable "MissingTranslation", "UnusedResources"
    }

    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            assets.srcDirs = ["../../assets"]
            res.srcDirs = ["../res"]
        }
        // debug.jniLibs.srcDirs = ["../libs/debug"]
        // release.jniLibs.srcDirs = ["../libs/release"]
    }
}

apply plugin: "org.mozilla.rust-android-gradle.rust-android"

cargo {
    module  = "../../shared"
    libname = "shared"
    targets = [
        // "arm",
        "arm64",
        // "x86",
        // "x86_64"
    ]
    targetDirectory = "../../shared/target"
    features {
        noDefaultBut("mobile")
    }
}

//
//
// Automate copy std libc
//
//

import org.apache.tools.ant.taskdefs.condition.Os

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'bundleDebug') {
        cargo.profile = "debug"
    } else if (task.name == 'assembleRelease' || task.name == 'bundleRelease') {
        cargo.profile = "release"
    }
    if (task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders') {
        task.dependsOn 'cargoBuild'
    }
    for (target in cargo.targets) {
        if (task.name == "cargoBuild${target.capitalize()}") {
            task.dependsOn "copy_libc++_shared${target.capitalize()}"
        }
    }
}

for (target in cargo.targets) {
      tasks.register("copy_libc++_shared${target.capitalize()}", Copy) {
        def ndkDir = android.ndkDirectory
        def hostTag
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            if (Os.isArch("x86_64") || Os.isArch("amd64")) {
                hostTag = "windows-x86_64"
            } else {
                hostTag = "windows"
            }
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            hostTag = "darwin-x86_64"
        } else {
            hostTag = "linux-x86_64"
        }

        def (abi, archTriple) = [
            arm: ['armeabi-v7a', 'arm-linux-androideabi'],
            arm64: ['arm64-v8a', 'aarch64-linux-android'],
            x86: ['x86', 'i686-linux-android'],
            x86_64: ['x86_64', 'x86_64-linux-android'],
        ][target]

        def from_path = "$ndkDir/toolchains/llvm/prebuilt/$hostTag/sysroot/usr/lib/$archTriple/libc++_shared.so"
        def into_path = layout.buildDirectory.dir("rustJniLibs/android/$abi")

        assert file(from_path).exists()

        from from_path
        into into_path
    }
}
